"""
Exports the configuration to the configuration default files.

This is intented to be used as a local pre-commit hook, which runs if the modmail/config.py file is changed.
"""
import pathlib
import sys
from collections import defaultdict

import atoml
import attr
import marshmallow
import yaml

import modmail.config


MODMAIL_CONFIG_DIR = pathlib.Path(modmail.config.__file__).parent
ENV_EXPORT_FILE = MODMAIL_CONFIG_DIR.parent / ".env.template"


def export_default_conf() -> None:
    """Export default configuration as both toml and yaml to the preconfigured locations."""
    conf = modmail.config.get_default_config()
    dump: dict = modmail.config.ConfigurationSchema().dump(conf)

    # Sort the dictionary configuration.
    # This is the only place where the order of the config should matter, when exporting in a specific style
    def sort_dict(d: dict) -> dict:
        """Takes a dict and sorts it, recursively."""
        sorted_dict = {x[0]: x[1] for x in sorted(d.items(), key=lambda e: e[0])}

        for k, v in d.items():
            if not isinstance(v, dict):
                continue
            sorted_dict[k] = sort_dict(v)

        return sorted_dict

    dump = sort_dict(dump)
    autogen_gen_notice = f"Directly run scripts/{__file__.rsplit('/',1)[-1]!s} to generate."
    doc = atoml.document()
    doc.add(atoml.comment("This is an autogenerated TOML document."))
    doc.add(atoml.comment(autogen_gen_notice))
    doc.add(atoml.nl())

    doc.update(dump)

    # toml

    with open(MODMAIL_CONFIG_DIR / (modmail.config.AUTO_GEN_FILE_NAME + ".toml"), "w") as f:
        atoml.dump(doc, f)

    # yaml
    with open(MODMAIL_CONFIG_DIR / (modmail.config.AUTO_GEN_FILE_NAME + ".yaml"), "w") as f:
        f.write("# This is an autogenerated YAML document.\n")
        f.write(f"# {autogen_gen_notice}\n")
        yaml.dump(dump, f, indent=4, Dumper=yaml.SafeDumper)


def export_env_conf() -> None:
    """
    Exports required configuration variables to .env.template.

    Does NOT export *all* settable variables!

    Export the *required* environment variables to `.env.template`.
    Required environment variables are any Config.default.bot variables that default to marshmallow.missing

    Currently supported environment loading only loads to Config.user.bot, so we only need to worry
    about those for the time being. Those values are additionally prefixed with `BOT_`.

    This means that in the end our exported variables are all prefixed with MODMAIL_BOT_,
    and followed by the uppercase name of each field.
    """
    env_prefix = modmail.config.ENV_PREFIX + modmail.config.BOT_ENV_PREFIX
    default = modmail.config.get_default_config()
    values = defaultdict(str)
    fields = attr.fields(default.bot.__class__)
    for attribute in fields:
        if attribute.default is marshmallow.missing:
            values[env_prefix + attribute.name.upper()] = attribute.metadata.get("modmail_export_filler", "")

    with open(ENV_EXPORT_FILE, "w") as f:
        for k, v in values.items():
            f.write(k + '="' + v + '"\n')


def main() -> None:
    """
    Exports the default configuration.

    There's two parts to this export.
    First, export the default configuration to the default locations.

    Next, export the *required* configuration variables to the .env.template

    """
    export_default_conf()

    export_env_conf()


if __name__ == "__main__":
    print("Exporting configuration to default files. If they exist, overwriting their contents.")
    sys.exit(main())
