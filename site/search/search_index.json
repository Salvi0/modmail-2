{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Discord Modmail \u00b6 Documentation : https://TODO.PLEASE.FILL.THIS.com Source Code : <a href=\"https://github.com/discord-modmail/modmail\" target=\"_blank\"https://github.com/discord-modmail/modmail License \u00b6 This project is licensed under the terms of the MIT license.","title":"DiscordModmail"},{"location":"#discord-modmail","text":"Documentation : https://TODO.PLEASE.FILL.THIS.com Source Code : <a href=\"https://github.com/discord-modmail/modmail\" target=\"_blank\"https://github.com/discord-modmail/modmail","title":"Discord Modmail"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"contributing/","text":"Development - Contributing \u00b6 Thank you so much for your interest in contributing!. All types of contributions are encouraged and valued. See below for different ways to help, and details about how this project handles them! Please make sure to read the relevant section before making your contribution! It will make it a lot easier for us maintainers to make the most of it and smooth out the experience for all involved. \ud83d\udc9a Note Failing to comply with our guidelines may lead to a rejection of the contribution. However, most features that are rejected can be written as a plugin, and used on your modmail, without blocking you from getting updates. If you are confused by any of these rules, feel free to ask us in the #support channel in our Discord server. How do I... \u00b6 Ask or Say Something \ud83e\udd14\ud83d\udc1b\ud83d\ude31 Request Support Report an Error or Bug Request a Feature Make Something \ud83e\udd13\ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb\ud83d\udcdc\ud83c\udf73 Project Setup Contribute Code Style Guides \u2705\ud83d\ude46\ud83c\udffc\ud83d\udc83\ud83d\udc54 Git Commit Messages Python Styleguide Changelog Requirement Request Support \u00b6 You can either ask your question as issue by opening one at discord-modmail/modmail/issues . * Join the Modmail Discord Server * Even though Discord is a chat service, sometimes it takes several hours for community members to respond \u2014 please be patient! * Use the #support channel for questions or discussion about writing or contributing to Discord Modmail bot. * There are many other channels available, check the channel list Report an Error or Bug \u00b6 If you run into an error or bug with the project: Note If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one. Open an Issue at discord-modmail/modmail/issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. When listing steps, don't just say what you did but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/paste-able snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behaviour you observed after following the steps and point out what exactly is the problem with that behaviour. Explain which behaviour you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. If you use the keyboard while following the steps, record the GIF with the Keybinding Resolver shown . You can use this tool to record GIFs on macOS and Windows, and this tool on Linux (of course there are plenty more). Request a Feature \u00b6 If the project doesn't do something you need or want it to do: Open an Issue at discord-modmail/modmail/issues . Provide as much context as you can about what you're running into. Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/paste-able snippets which you use in those examples, as Markdown code blocks . Explain why this enhancement would be useful to Modmail, and would benefit the community members. Please try and be clear about why existing features and alternatives would not work for you. Once it's filed: The Maintainers will label the issue . The Maintainers will evaluate the feature request, possibly asking you more questions to understand its purpose and any relevant requirements. If the issue is closed, the team will convey their reasoning and suggest an alternative path forward. If the feature request is accepted, it will be marked for implementation with status: approved , which can then be done either by a core team member or by anyone in the community who wants to contribute code. Note The team is unlikely to be able to accept every single feature request that is filed. Please understand if they need to say no. However for most features requested, you can always write a plugin for your modmail bot. Project Setup \u00b6 So you want to contribute some code! That's great! This project uses GitHub Pull Requests to manage contributions, so read up on how to fork a GitHub project and file a PR if you've never done it before. Test Server and Bot Account \u00b6 You will need your own test server and bot account on Discord to test your changes to the bot. Create a test server. Create a bot account and invite it to the server you just created. Tip Learn how to obtain the ID of a server, channel or role here . Fork the Project \u00b6 You will need your own remote (online) copy of the project repository, known as a fork. You will do all your work in the fork rather than directly in the main repository. You can click here to fork And you should be ready to go! Once you have your fork you will need to clone the repo to your computer. $ git clone https://github.com/<your username>/modmail ---> 100% $ cd modmail or using the github cli : $ gh repo clone <your username>/modmail ---> 100% $ cd modmail Tip You can use the github cli to fork the repo as well, just use gh repo fork discord-modmail/modmail and it will allow you to clone it directly. Install development dependencies \u00b6 Make sure you are in the project directory. $ poetry install ---> 100% Tip Run poetry run task precommit to install precommit hooks. This runs our register pre-commit hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. Set up environment variables \u00b6 Create a text file named .env in your project root (that's the base folder of your repository): You can also copy the .env.template file to .env Note The entire file name is literally .env Open the file with any text editor. Each environment variable is on its own line, with the variable and the value separated by a = sign. The following variables are needed for running Modmail: \u00b6 Required ENV VARIABLE NAME TYPE WHAT IS IT? True TOKEN String Bot Token from the Discord developer portal False DEVELOP Boolean Enables the developer bot extensions False PLUGIN_DEV Boolean Enables plugin-developer friendly bot extensions The rest of them can be viewed in our [.env.template] Run The Project \u00b6 To run the project, use the (below) in the project root. $ poetry run task start ---> 100% Contribute Code \u00b6 We like code commits a lot! They're super handy, and they keep the project going and doing the work it needs to do to be useful to others. Code contributions of just about any size are acceptable! To contribute code: Set up the project . Make any necessary changes to the source code. Write clear, concise commit message(s). A more in-depth guide to writing great commit messages can be found in Chris Beam's How to Write a Git Commit Message . Run flake8 , black and pre-commit against your code before you push. Your commit will be rejected by the build server if it fails to lint. You can run the lint by executing poetry run task lint in your command line. Go to discord-modmail/modmail/pulls and open a new pull request with your changes. If PRing from your own fork, ensure that \"Allow edits from maintainers\" is checked . This permits maintainers to commit changes directly to your fork, speeding up the review process. If your PR is connected to an open issue, add a line in your PR's description that says Closes #123 , where #123 is the number of the issue you're fixing. This will make github link your issue, and make it easier for us (and other contributers) to find and understand the context behind your PR. Technical Details Pull requests (or PRs for short) are the primary mechanism we use to change modmail. GitHub itself has some great documentation on using the Pull Request feature. We use the \"fork and pull\" model described here , where contributors push changes to their personal fork and create pull requests to bring those changes into the source repository. Once you've filed the PR: Barring special circumstances, maintainers will not review PRs until lint checks pass ( poetry run task lint ). One or more contributors will use GitHub's review feature to review your PR. If the maintainer asks for any changes, edit your changes, push, and ask for another review. If the maintainer decides to pass on your PR, they will thank you for the contribution and explain why they won't be accepting the changes. That's ok! We still really appreciate you taking the time to do it, and we don't take that lightly. \ud83d\udc9a If your PR gets accepted, it will be marked as such, and merged into the main branch soon after. Git Commit Messages \u00b6 Commit messages must start with a short summary (max. 50 chars) written in the imperative, followed by an optional, more detailed explanatory text which is separated from the summary by an empty line. Commit messages should follow best practices, including explaining the context of the problem and how it was solved, including caveats or follow up changes required. They should tell the story of the change and provide readers understanding of what led to it. Check out Conventional commits for more information. If you're lost about what this even means, please see How to Write a Git Commit Message for a start. In practice, the best approach to maintaining a nice commit message is to leverage a git add -p and git commit --amend to formulate a solid changeset. This allows one to piece together a change, as information becomes available. If you squash a series of commits, don't just submit that. Re-write the commit message, as if the series of commits was a single stroke of brilliance. That said, there is no requirement to have a single commit for a PR, as long as each commit tells the story. For example, if there is a feature that requires a package, it might make sense to have the package in a separate commit then have a subsequent commit that uses it. Remember, you're telling part of the story with the commit message. Don't make your chapter weird. Python Styleguide \u00b6 Changelog Requirement \u00b6 Modmail has CI that will check for an entry corresponding to your PR in CHANGES.md . If you feel this PR does not require a changelog entry please state that in a comment and a maintainer can add a skip changelog label to make the CI pass. Otherwise, please ensure you have a line in the following format: * `Modmail` is now more awesome (#X) Note X should be your PR number, not issue number! This is not perfect but saves a lot of release overhead as now the releaser does not need to go back and workout what to add to the CHANGES.md for each release. Attribution \u00b6 This contributing guide is inspired by the Moby's and Atom Text Editor's contributing guide.","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"Thank you so much for your interest in contributing!. All types of contributions are encouraged and valued. See below for different ways to help, and details about how this project handles them! Please make sure to read the relevant section before making your contribution! It will make it a lot easier for us maintainers to make the most of it and smooth out the experience for all involved. \ud83d\udc9a Note Failing to comply with our guidelines may lead to a rejection of the contribution. However, most features that are rejected can be written as a plugin, and used on your modmail, without blocking you from getting updates. If you are confused by any of these rules, feel free to ask us in the #support channel in our Discord server.","title":"Development - Contributing"},{"location":"contributing/#how-do-i","text":"Ask or Say Something \ud83e\udd14\ud83d\udc1b\ud83d\ude31 Request Support Report an Error or Bug Request a Feature Make Something \ud83e\udd13\ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb\ud83d\udcdc\ud83c\udf73 Project Setup Contribute Code Style Guides \u2705\ud83d\ude46\ud83c\udffc\ud83d\udc83\ud83d\udc54 Git Commit Messages Python Styleguide Changelog Requirement","title":"How do I..."},{"location":"contributing/#request-support","text":"You can either ask your question as issue by opening one at discord-modmail/modmail/issues . * Join the Modmail Discord Server * Even though Discord is a chat service, sometimes it takes several hours for community members to respond \u2014 please be patient! * Use the #support channel for questions or discussion about writing or contributing to Discord Modmail bot. * There are many other channels available, check the channel list","title":"Request Support"},{"location":"contributing/#report-an-error-or-bug","text":"If you run into an error or bug with the project: Note If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one. Open an Issue at discord-modmail/modmail/issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. When listing steps, don't just say what you did but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/paste-able snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behaviour you observed after following the steps and point out what exactly is the problem with that behaviour. Explain which behaviour you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. If you use the keyboard while following the steps, record the GIF with the Keybinding Resolver shown . You can use this tool to record GIFs on macOS and Windows, and this tool on Linux (of course there are plenty more).","title":"Report an Error or Bug"},{"location":"contributing/#request-a-feature","text":"If the project doesn't do something you need or want it to do: Open an Issue at discord-modmail/modmail/issues . Provide as much context as you can about what you're running into. Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/paste-able snippets which you use in those examples, as Markdown code blocks . Explain why this enhancement would be useful to Modmail, and would benefit the community members. Please try and be clear about why existing features and alternatives would not work for you. Once it's filed: The Maintainers will label the issue . The Maintainers will evaluate the feature request, possibly asking you more questions to understand its purpose and any relevant requirements. If the issue is closed, the team will convey their reasoning and suggest an alternative path forward. If the feature request is accepted, it will be marked for implementation with status: approved , which can then be done either by a core team member or by anyone in the community who wants to contribute code. Note The team is unlikely to be able to accept every single feature request that is filed. Please understand if they need to say no. However for most features requested, you can always write a plugin for your modmail bot.","title":"Request a Feature"},{"location":"contributing/#project-setup","text":"So you want to contribute some code! That's great! This project uses GitHub Pull Requests to manage contributions, so read up on how to fork a GitHub project and file a PR if you've never done it before.","title":"Project Setup"},{"location":"contributing/#test-server-and-bot-account","text":"You will need your own test server and bot account on Discord to test your changes to the bot. Create a test server. Create a bot account and invite it to the server you just created. Tip Learn how to obtain the ID of a server, channel or role here .","title":"Test Server and Bot Account"},{"location":"contributing/#fork-the-project","text":"You will need your own remote (online) copy of the project repository, known as a fork. You will do all your work in the fork rather than directly in the main repository. You can click here to fork And you should be ready to go! Once you have your fork you will need to clone the repo to your computer. $ git clone https://github.com/<your username>/modmail ---> 100% $ cd modmail or using the github cli : $ gh repo clone <your username>/modmail ---> 100% $ cd modmail Tip You can use the github cli to fork the repo as well, just use gh repo fork discord-modmail/modmail and it will allow you to clone it directly.","title":"Fork the Project"},{"location":"contributing/#install-development-dependencies","text":"Make sure you are in the project directory. $ poetry install ---> 100% Tip Run poetry run task precommit to install precommit hooks. This runs our register pre-commit hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks.","title":"Install development dependencies"},{"location":"contributing/#set-up-environment-variables","text":"Create a text file named .env in your project root (that's the base folder of your repository): You can also copy the .env.template file to .env Note The entire file name is literally .env Open the file with any text editor. Each environment variable is on its own line, with the variable and the value separated by a = sign.","title":"Set up environment variables"},{"location":"contributing/#the-following-variables-are-needed-for-running-modmail","text":"Required ENV VARIABLE NAME TYPE WHAT IS IT? True TOKEN String Bot Token from the Discord developer portal False DEVELOP Boolean Enables the developer bot extensions False PLUGIN_DEV Boolean Enables plugin-developer friendly bot extensions The rest of them can be viewed in our [.env.template]","title":"The following variables are needed for running Modmail:"},{"location":"contributing/#run-the-project","text":"To run the project, use the (below) in the project root. $ poetry run task start ---> 100%","title":"Run The Project"},{"location":"contributing/#contribute-code","text":"We like code commits a lot! They're super handy, and they keep the project going and doing the work it needs to do to be useful to others. Code contributions of just about any size are acceptable! To contribute code: Set up the project . Make any necessary changes to the source code. Write clear, concise commit message(s). A more in-depth guide to writing great commit messages can be found in Chris Beam's How to Write a Git Commit Message . Run flake8 , black and pre-commit against your code before you push. Your commit will be rejected by the build server if it fails to lint. You can run the lint by executing poetry run task lint in your command line. Go to discord-modmail/modmail/pulls and open a new pull request with your changes. If PRing from your own fork, ensure that \"Allow edits from maintainers\" is checked . This permits maintainers to commit changes directly to your fork, speeding up the review process. If your PR is connected to an open issue, add a line in your PR's description that says Closes #123 , where #123 is the number of the issue you're fixing. This will make github link your issue, and make it easier for us (and other contributers) to find and understand the context behind your PR. Technical Details Pull requests (or PRs for short) are the primary mechanism we use to change modmail. GitHub itself has some great documentation on using the Pull Request feature. We use the \"fork and pull\" model described here , where contributors push changes to their personal fork and create pull requests to bring those changes into the source repository. Once you've filed the PR: Barring special circumstances, maintainers will not review PRs until lint checks pass ( poetry run task lint ). One or more contributors will use GitHub's review feature to review your PR. If the maintainer asks for any changes, edit your changes, push, and ask for another review. If the maintainer decides to pass on your PR, they will thank you for the contribution and explain why they won't be accepting the changes. That's ok! We still really appreciate you taking the time to do it, and we don't take that lightly. \ud83d\udc9a If your PR gets accepted, it will be marked as such, and merged into the main branch soon after.","title":"Contribute Code"},{"location":"contributing/#git-commit-messages","text":"Commit messages must start with a short summary (max. 50 chars) written in the imperative, followed by an optional, more detailed explanatory text which is separated from the summary by an empty line. Commit messages should follow best practices, including explaining the context of the problem and how it was solved, including caveats or follow up changes required. They should tell the story of the change and provide readers understanding of what led to it. Check out Conventional commits for more information. If you're lost about what this even means, please see How to Write a Git Commit Message for a start. In practice, the best approach to maintaining a nice commit message is to leverage a git add -p and git commit --amend to formulate a solid changeset. This allows one to piece together a change, as information becomes available. If you squash a series of commits, don't just submit that. Re-write the commit message, as if the series of commits was a single stroke of brilliance. That said, there is no requirement to have a single commit for a PR, as long as each commit tells the story. For example, if there is a feature that requires a package, it might make sense to have the package in a separate commit then have a subsequent commit that uses it. Remember, you're telling part of the story with the commit message. Don't make your chapter weird.","title":"Git Commit Messages"},{"location":"contributing/#python-styleguide","text":"","title":"Python Styleguide"},{"location":"contributing/#changelog-requirement","text":"Modmail has CI that will check for an entry corresponding to your PR in CHANGES.md . If you feel this PR does not require a changelog entry please state that in a comment and a maintainer can add a skip changelog label to make the CI pass. Otherwise, please ensure you have a line in the following format: * `Modmail` is now more awesome (#X) Note X should be your PR number, not issue number! This is not perfect but saves a lot of release overhead as now the releaser does not need to go back and workout what to add to the CHANGES.md for each release.","title":"Changelog Requirement"},{"location":"contributing/#attribution","text":"This contributing guide is inspired by the Moby's and Atom Text Editor's contributing guide.","title":"Attribution"},{"location":"release-notes/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 0.1.0 - 2021-08-13 \u00b6 Added \u00b6 Bot modes to determine behavior. Multiple can be applied at once. (#43) PROD : the default mode, no dev extensions or dev plugins load DEVELOP : the bot developer mode, most useful for people adding features to modmail Enables the extension_manager extension. PLUGIN_DEV : the plugin developer mode, useful for enabling plugin specific features This is not used yet. Extension loading system (#43) scans for extensions in the modmail/extensions folder and loads them if they are of the right format. all extensions must be loadable as a module, which means they must have __init__.py files in their directories. Plugin loading system (#43) scans for plugins in the modmail/plugins folder and loads them. Unlike extensions, plugins and their respective folders do not need to have __init__.py files and are allowed to be symlinks. Extension management commands (#43) load, reload, unload, list, refresh commands for dealing with extensions Run the ext command for more details when bot is in DEVELOP mode. Plugin management commands (#43) load, reload, unload, list, refresh commands for dealing with plugins Run the plugins command for more details. Extension metadata (#43) used to determine if a cog should load or not depending on the bot mode Plugin helper file (#43) modmail/plugin_helpers.py contains several helpers for making plugins PluginCog ModmailBot , imported from modmail.bot ModmailLogger , imported from modmail.log Meta Cog (#43) NOTE : The commands in this cog are not stabilized yet and should not be relied upon. Prefix command for getting the set prefix. Most useful by mentioning the bot. Uptime command which tells the end user how long the bot has been online. Ping command to see the bot latency. Guide on how to contribute to modmail, see [CONTRIBUTING.md] Start a Changelog Fixed \u00b6 Make the bot http_session within an event loop.","title":"Changelog"},{"location":"release-notes/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"release-notes/#unreleased","text":"","title":"Unreleased"},{"location":"release-notes/#010-2021-08-13","text":"","title":"0.1.0 - 2021-08-13"},{"location":"release-notes/#added","text":"Bot modes to determine behavior. Multiple can be applied at once. (#43) PROD : the default mode, no dev extensions or dev plugins load DEVELOP : the bot developer mode, most useful for people adding features to modmail Enables the extension_manager extension. PLUGIN_DEV : the plugin developer mode, useful for enabling plugin specific features This is not used yet. Extension loading system (#43) scans for extensions in the modmail/extensions folder and loads them if they are of the right format. all extensions must be loadable as a module, which means they must have __init__.py files in their directories. Plugin loading system (#43) scans for plugins in the modmail/plugins folder and loads them. Unlike extensions, plugins and their respective folders do not need to have __init__.py files and are allowed to be symlinks. Extension management commands (#43) load, reload, unload, list, refresh commands for dealing with extensions Run the ext command for more details when bot is in DEVELOP mode. Plugin management commands (#43) load, reload, unload, list, refresh commands for dealing with plugins Run the plugins command for more details. Extension metadata (#43) used to determine if a cog should load or not depending on the bot mode Plugin helper file (#43) modmail/plugin_helpers.py contains several helpers for making plugins PluginCog ModmailBot , imported from modmail.bot ModmailLogger , imported from modmail.log Meta Cog (#43) NOTE : The commands in this cog are not stabilized yet and should not be relied upon. Prefix command for getting the set prefix. Most useful by mentioning the bot. Uptime command which tells the end user how long the bot has been online. Ping command to see the bot latency. Guide on how to contribute to modmail, see [CONTRIBUTING.md] Start a Changelog","title":"Added"},{"location":"release-notes/#fixed","text":"Make the bot http_session within an event loop.","title":"Fixed"}]}
